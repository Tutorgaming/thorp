# Thorp recovery behaviors; use spinning as a last resort

recovery_behaviors:
  - {name: clear_both_cms,    type: clear_costmap_recovery/ClearCostmapRecovery}
  - {name: clear_local_cm,    type: clear_costmap_recovery/ClearCostmapRecovery}
  - {name: clear_global_cm,   type: clear_costmap_recovery/ClearCostmapRecovery}
  - {name: escape_distance,   type: thorp_mbf_plugins/SlowEscapeRecovery}
  - {name: out_of_collision,  type: thorp_mbf_plugins/SlowEscapeRecovery}
  - {name: out_to_free_space, type: thorp_mbf_plugins/SlowEscapeRecovery}
#  - {name: lp_altern_config,  type: change_config_recovery/ChangeConfigRecovery}
#  - {name: gp_altern_config,  type: clear_costmap_recovery/ClearCostmapRecovery}   # TODO dyn reconf. for NavFn and/or change global costmap params
  - {name: clearing_rotation, type: rotate_recovery/RotateRecovery}

# Define parameters for loaded recovery behaviors

clear_both_cms:
  layer_names: [obstacle_layer, range_sensor_layer]
  force_updating: true
  reset_distance: 0.0
  affected_maps: both

clear_local_cm:
  layer_names: [obstacle_layer, range_sensor_layer]
  force_updating: true
  reset_distance: 0.0
  affected_maps: local

clear_global_cm:
  layer_names: [obstacle_layer, range_sensor_layer]
  force_updating: true
  reset_distance: 0.0
  affected_maps: global

clearing_rotation:   # all are default values, just informative
  acc_lim_th: 3.2
  max_rotational_vel: 1.0
  min_in_place_rotational_vel: 0.4
  yaw_goal_tolerance: 0.10

# local planner alternative configuration: less safe and more detailed map
lp_altern_config:
  limited_duration: 8.0
  limited_distance: 0.2
  local_costmap:
    width: 3
    height: 3
    resolution: 0.01
    footprint_padding: 0.01
  controller:
    max_trans_vel: 0.25
    max_rot_vel: 0.5
    sim_granularity: 0.005
    angular_sim_granularity: 0.025

# global planner alternative configuration: relaxed planning constraints    doesn't exist for NavFn!!!
#gp_altern_config:
#  limited_duration: 8.0
#  limited_distance: 0.2
#  NavfnROS:
#    allocated_time: 6.0
#    initial_epsilon: 8.0

# slow_escape_recovery variants
# use YAML anchors and aliases to avoid repeating common values (unfortunately merge Keys are not supported)

# follow down costmap cost gradient for a short distance with time limit
escape_distance:
  v_max: &vm 0.1                 # m/s; controller maximum linear velocity
  w_max: &wm 0.15                # rad/s; controller maximum angular velocity
  wheel_separation: &ws 0.23     # meters; required to compute per-wheel velocities
  controller_frequency: &cf 8.0  # Hz; ideally same frequency as local costmap, as will sync with its updates
  vel_projection_time: &vpt 0.5  # seconds; time to project candidate velocities before estimating its cost
  max_execution_time: 10.0       # seconds; maximum recovery execution time
  max_travelled_distance: 0.2    # meters; maximum distance to travel during recovery execution

# same as escape_distance but move until footprint doesn't touch any lethal obstacle in both costmaps
out_of_collision:
  v_max: *vm
  w_max: *wm
  wheel_separation: *ws
  controller_frequency: *cf
  vel_projection_time: *vpt
  escape_from_collision: 0.1    # move 10 cm away from the closest obstacle
  max_execution_time: 15.0      # provide a maximum time for safety
  max_travelled_distance: 1.0   # provide a maximum distance for safety

out_to_free_space:
  v_max: *vm
  w_max: *wm
  wheel_separation: *ws
  controller_frequency: *cf
  vel_projection_time: *vpt
  escape_from_inscribed: 0.0    # move right outside the inscribed inflated area
  max_execution_time: 15.0      # provide a maximum time for safety
  max_travelled_distance: 1.0   # provide a maximum distance for safety
